@inherits TestContext

@code {
	private string noSettingsConfiguredMessage = "No settings configured";

	public SettingsTest()
	{
		this.AddTestAuthorization();

		var settingsResourcesMock = new Mock<IStringLocalizer<KITT.Web.App.Resources.Pages.Settings>>();
		settingsResourcesMock
			.Setup(r => r[nameof(Resources.Pages.Settings.NoSettingsConfiguredMessage)])
			.Returns(new LocalizedString(nameof(Resources.Pages.Settings.NoSettingsConfiguredMessage), noSettingsConfiguredMessage));

		Services.AddSingleton<IStringLocalizer<KITT.Web.App.Resources.Pages.Settings>>(settingsResourcesMock.Object);

		this.SetupFluentUI();
	}

	[Fact]
	public void Settings_Should_Show_Expected_Message_If_Settings_Items_Are_Empty()
	{
		var clientMock = new Mock<ISettingsClient>();
		clientMock.Setup(c => c.GetAllSettingsAsync())
			.Returns(Task.FromResult(new SettingsListModel()));

		Services.AddSingleton<ISettingsClient>(clientMock.Object);

		var component = Render(@<Settings />);
		var noSettingsContainer = component.Find("h2#noSettingsConfiguredContainer");
		Assert.Equal(noSettingsConfiguredMessage, noSettingsContainer.TextContent);
	}

	[Fact]
	public void Settings_Should_Render_Items_Rows_Correctly()
	{
		var items = new[]
		{
			new SettingsListModel.SettingsDescriptor { Id = Guid.NewGuid(), TwitchChannel = "albx87" }
		};

		var clientMock = new Mock<ISettingsClient>();
		clientMock.Setup(c => c.GetAllSettingsAsync())
			.Returns(Task.FromResult(new SettingsListModel { Items = items }));

		Services.AddSingleton<ISettingsClient>(clientMock.Object);

		var component = Render(@<Settings />);
		var rows = component.FindAll("""fluent-data-grid > fluent-data-grid-row[row-type="default"]""");

		Assert.Equal(items.Length, rows.Count);
		Assert.Equal(items.First().TwitchChannel, rows.First().TextContent);
	}
}
