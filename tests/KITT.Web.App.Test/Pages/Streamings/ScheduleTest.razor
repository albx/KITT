@inherits TestContext

@code {
    public ScheduleTest()
    {
        this.AddTestAuthorization();
        this.SetupFluentUI();

        var commonLocalizerMock = new Mock<IStringLocalizer<KITT.Web.App.UI.Resources.Common>>();
        var scheduleLocalizerMock = new Mock<IStringLocalizer<KITT.Web.App.Resources.Pages.Streamings.Schedule>>();
        var scheduleFormLocalizerMock = new Mock<IStringLocalizer<KITT.Web.App.Resources.Components.ScheduleForm>>();

        Services
            .AddSingleton(commonLocalizerMock.Object)
            .AddSingleton(scheduleLocalizerMock.Object)
            .AddSingleton(scheduleFormLocalizerMock.Object)
            .AddSingleton(new Mock<IDialogService>().Object);
    }

    [Fact]
    public void Schedule_Should_Not_Submit_If_Form_Is_Invalid()
    {
        var clientMock = new Mock<IStreamingsClient>();
        Services.AddSingleton(clientMock.Object);

        Services.AddSingleton(new Mock<IToastService>().Object);

        var component = Render(@<Schedule />);

        var form = component.Find("form");
        form.Submit();

        var errors = component.FindAll(".validation-message").Where(e => !string.IsNullOrEmpty(e.TextContent));
        Assert.NotEmpty(errors);

        clientMock.Verify(c => c.ScheduleStreamingAsync(It.IsAny<ScheduleStreamingModel>()), Times.Never);
    }

    [Fact]
    public void Schedule_Should_Save_Streaming_Correctly_And_Redirect_To_Index()
    {
        var clientMock = new Mock<IStreamingsClient>();
        Services.AddSingleton(clientMock.Object);

        Services.AddSingleton(new Mock<IToastService>().Object);

        var navigationManager = Services.GetRequiredService<FakeNavigationManager>();

        var component = Render(@<Schedule />);

        component.Find("#streamingTitle").Change("test");
        component.Find("#streamingSlug").Change("test");
        component.Find("#streamingChannel").Change("albx87");
        component.Find("#streamingScheduleDate").Change(DateTime.Today.AddDays(5));
        component.Find("#streamingStartTime").Change(new TimeSpan(18, 30, 0));
        component.Find("#streamingEndTime").Change(new TimeSpan(20, 0, 0));

        var saveButton = component.Find("#saveContentButton");
        saveButton.Click();

        clientMock.Verify(
            c => c.ScheduleStreamingAsync(It.Is<ScheduleStreamingModel>(s => s.Title == "test" && s.Slug == "test" && s.HostingChannelUrl == "https://www.twitch.tv/albx87")), 
            Times.Once);

        var expectedUrl = $"{navigationManager.BaseUri}streamings";
        Assert.Equal(expectedUrl, navigationManager.Uri);
    }
}
