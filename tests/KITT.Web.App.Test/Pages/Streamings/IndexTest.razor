@inherits TestContext

@code {
    public IndexTest()
    {
        this.AddTestAuthorization();

        var commonLocalizerMock = new Mock<IStringLocalizer<KITT.Web.App.UI.Resources.Common>>();
        var indexLocalizerMock = new Mock<IStringLocalizer<KITT.Web.App.Resources.Pages.Streamings.Index>>();
        indexLocalizerMock
            .Setup(r => r[nameof(KITT.Web.App.Resources.Pages.Streamings.Index.DeleteStreamingConfirmTitle)])
            .Returns(new LocalizedString(nameof(KITT.Web.App.Resources.Pages.Streamings.Index.DeleteStreamingConfirmTitle), nameof(KITT.Web.App.Resources.Pages.Streamings.Index.DeleteStreamingConfirmTitle)));

        indexLocalizerMock
            .Setup(r => r[nameof(Resources.Pages.Streamings.Index.DeleteStreamingConfirmText), "test"])
            .Returns(new LocalizedString(nameof(Resources.Pages.Streamings.Index.DeleteStreamingConfirmText), nameof(Resources.Pages.Streamings.Index.DeleteStreamingConfirmText)));

        Services
            .AddSingleton<IStringLocalizer<KITT.Web.App.UI.Resources.Common>>(commonLocalizerMock.Object)
            .AddSingleton<IStringLocalizer<KITT.Web.App.Resources.Pages.Streamings.Index>>(indexLocalizerMock.Object);

        this.SetupFluentUI();
    }

    [Fact]
    public void Index_OpenStreamingDetail_Should_Open_Streaming_Detail_Url()
    {
        var item = new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test" };

        var clientMock = new Mock<IStreamingsClient>();
        clientMock.Setup(c => c.GetAllStreamingsAsync(It.IsAny<StreamingQueryModel>()))
            .ReturnsAsync(new StreamingsListModel { Items = new[] { item }, TotalItems = 1 });

        RegisterServices(clientMock: clientMock);
        RenderComponent<FluentDialogProvider>();
        
        var component = Render(@<KITT.Web.App.Pages.Streamings.Index />);

        var searchForm = component.Find("#streamingSearchForm");
        searchForm.Submit();

        var openDetailButton = component.Find($"#openStreamingDetail-{item.Id}");
        openDetailButton.Click();

        var navigationManager = Services.GetRequiredService<FakeNavigationManager>();

        var expectedUri = $"{navigationManager.BaseUri}streamings/{item.Id}";
        Assert.Equal(expectedUri, navigationManager.Uri);
    }

    [Fact]
    public void Index_DeleteStreaming_Should_Call_Delete_Api_If_Confirmed()
    {
        var item = new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test" };

        var clientMock = new Mock<IStreamingsClient>();
        clientMock.Setup(c => c.GetAllStreamingsAsync(It.IsAny<StreamingQueryModel>()))
            .ReturnsAsync(new StreamingsListModel { Items = new[] { item }, TotalItems = 1 });

        var dialogServiceMock = new Mock<IDialogService>();
        var dialogReferenceMock = new Mock<IDialogReference>();
        dialogReferenceMock.SetupGet(r => r.Result)
            .Returns(Task.FromResult(DialogResult.Ok<object>(null)));

        dialogServiceMock
            .Setup(d => d.ShowConfirmationAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>()))
            .Returns(Task.FromResult(dialogReferenceMock.Object));

        RegisterServices(clientMock: clientMock, dialogServiceMock: dialogServiceMock);
        RenderComponent<FluentDialogProvider>();

        var component = Render(@<KITT.Web.App.Pages.Streamings.Index />);

        var searchForm = component.Find("#streamingSearchForm");
        searchForm.Submit();

        var deleteButton = component.Find($"#deleteStreaming-{item.Id}");
        deleteButton.Click();

        clientMock.Verify(c => c.DeleteStreamingAsync(item.Id), Times.Once(), "");
    }

    [Fact]
    public void Index_Should_Render_All_Streamings_Correctly()
    {
        var items = new[]
        {
            new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test1" },
            new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test2" }
        };

        var clientMock = new Mock<IStreamingsClient>();
        clientMock.Setup(c => c.GetAllStreamingsAsync(It.IsAny<StreamingQueryModel>()))
            .ReturnsAsync(new StreamingsListModel { Items = items, TotalItems = items.Length });

        RegisterServices(clientMock: clientMock);
        
        var component = Render(@<KITT.Web.App.Pages.Streamings.Index />);

        var searchForm = component.Find("#streamingSearchForm");
        searchForm.Submit();

        var streamingsRows = component.FindAll("""fluent-data-grid > fluent-data-grid-row[row-type="default"]""");

        Assert.Equal(items.Length, streamingsRows.Count);
    }

    private void RegisterServices(
        Mock<IStreamingsClient>? clientMock = null, 
        Mock<IToastService>? toastServiceMock = null, 
        Mock<IDialogService>? dialogServiceMock = null)
    {
        if (clientMock is null)
            clientMock = new Mock<IStreamingsClient>();
        if (toastServiceMock is null)
            toastServiceMock = new Mock<IToastService>();
        if (dialogServiceMock is null)
            dialogServiceMock = new Mock<IDialogService>();

        Services
            .AddSingleton<IStreamingsClient>(clientMock.Object)
            .AddSingleton(toastServiceMock.Object)
            .AddSingleton(dialogServiceMock.Object);
    }
}
