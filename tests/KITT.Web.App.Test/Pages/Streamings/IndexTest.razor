@inherits TestContext

@code {
    public IndexTest()
    {
        this.AddTestAuthorization();

        var commonLocalizerMock = new Mock<IStringLocalizer<KITT.Web.App.UI.Resources.Common>>();
        var indexLocalizerMock = new Mock<IStringLocalizer<KITT.Web.App.Resources.Pages.Streamings.Index>>();
        indexLocalizerMock
            .Setup(r => r[nameof(KITT.Web.App.Resources.Pages.Streamings.Index.DeleteStreamingConfirmTitle)])
            .Returns(new LocalizedString(nameof(KITT.Web.App.Resources.Pages.Streamings.Index.DeleteStreamingConfirmTitle), nameof(KITT.Web.App.Resources.Pages.Streamings.Index.DeleteStreamingConfirmTitle)));

        indexLocalizerMock
            .Setup(r => r[nameof(Resources.Pages.Streamings.Index.DeleteStreamingConfirmText), "test"])
            .Returns(new LocalizedString(nameof(Resources.Pages.Streamings.Index.DeleteStreamingConfirmText), nameof(Resources.Pages.Streamings.Index.DeleteStreamingConfirmText)));

        Services
            .AddSingleton<IStringLocalizer<KITT.Web.App.UI.Resources.Common>>(commonLocalizerMock.Object)
            .AddSingleton<IStringLocalizer<KITT.Web.App.Resources.Pages.Streamings.Index>>(indexLocalizerMock.Object);

        JSInterop.SetupVoid("mudPopover.initialize", _ => true);
    }

    [Fact]
    public void Index_OpenStreamingDetail_Should_Open_Streaming_Detail_Url()
    {
        var item = new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test" };

        var clientMock = new Mock<IStreamingsClient>();
        clientMock.Setup(c => c.GetAllStreamingsAsync(It.IsAny<StreamingQueryModel>()))
            .ReturnsAsync(new StreamingsListModel { Items = new[] { item }, TotalItems = 1 });

        RegisterServices(clientMock: clientMock);
        RegisterMudDialog();

        var component = Render(@<KITT.Web.App.Pages.Streamings.Index />);

        var searchForm = component.Find("#streamingSearchForm");
        searchForm.Submit();

        var openDetailButton = component.Find($"button#openStreamingDetail-{item.Id}");
        openDetailButton.Click();

        var navigationManager = Services.GetRequiredService<FakeNavigationManager>();

        var expectedUri = $"{navigationManager.BaseUri}streamings/{item.Id}";
        Assert.Equal(expectedUri, navigationManager.Uri);
    }

    [Fact]
    public void Index_DeleteStreaming_Should_Call_Delete_Api_If_Confirmed()
    {
        var item = new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test" };

        var clientMock = new Mock<IStreamingsClient>();
        clientMock.Setup(c => c.GetAllStreamingsAsync(It.IsAny<StreamingQueryModel>()))
            .ReturnsAsync(new StreamingsListModel { Items = new[] { item }, TotalItems = 1 });

        RegisterServices(clientMock: clientMock);
        RegisterMudDialog();

        var dialogProvider = RenderComponent<MudDialogProvider>();

        var component = Render(@<KITT.Web.App.Pages.Streamings.Index />);

        var searchForm = component.Find("#streamingSearchForm");
        searchForm.Submit();

        var deleteButton = component.Find($"button#deleteStreaming-{item.Id}");
        deleteButton.Click();

        var confirmButton = dialogProvider.Find("#confirmButton");
        confirmButton.Click();

        clientMock.Verify(c => c.DeleteStreamingAsync(item.Id), Times.Once(), "");
    }

    [Fact]
    public void Index_Should_Render_All_Streamings_Correctly()
    {
        var items = new[]
        {
            new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test1" },
            new StreamingsListModel.StreamingListItemModel { Id = Guid.NewGuid(), Title = "test2" }
        };

        var clientMock = new Mock<IStreamingsClient>();
        clientMock.Setup(c => c.GetAllStreamingsAsync(It.IsAny<StreamingQueryModel>()))
            .ReturnsAsync(new StreamingsListModel { Items = items, TotalItems = items.Length });

        RegisterServices(clientMock: clientMock);
        RegisterMudDialog();

        var component = Render(@<KITT.Web.App.Pages.Streamings.Index />);

        var searchForm = component.Find("#streamingSearchForm");
        searchForm.Submit();

        var streamingsRows = component.FindAll("table > tbody > tr");

        Assert.Equal(items.Length, streamingsRows.Count);
    }

    private void RegisterServices(Mock<IStreamingsClient>? clientMock = null, Mock<ISnackbar>? snackbarMock = null)
    {
        if (clientMock is null)
            clientMock = new Mock<IStreamingsClient>();
        if (snackbarMock is null)
            snackbarMock = new Mock<ISnackbar>();

        var popoverServiceMock = new Mock<MudBlazor.IPopoverService>();
        popoverServiceMock.SetupGet(s => s.PopoverOptions).Returns(new PopoverOptions());

        var keyInterceptorFactoryMock = new Mock<MudBlazor.Services.IKeyInterceptorFactory>();
        keyInterceptorFactoryMock
            .Setup(f => f.Create())
            .Returns(new Mock<MudBlazor.Services.IKeyInterceptor>().Object);

        Services
            .AddSingleton<IStreamingsClient>(clientMock.Object)
            .AddSingleton<ISnackbar>(snackbarMock.Object)
            .AddSingleton<MudBlazor.Services.IKeyInterceptorFactory>(keyInterceptorFactoryMock.Object)
            .AddSingleton<MudBlazor.IScrollManager>(new Mock<MudBlazor.IScrollManager>().Object)
            .AddSingleton<MudBlazor.IPopoverService>(popoverServiceMock.Object);
    }

    private void RegisterMudDialog()
    {
        Services.AddSingleton<IDialogService, DialogService>();
        Services.AddMudServices(options =>
        {
            options.SnackbarConfiguration.ShowTransitionDuration = 0;
            options.SnackbarConfiguration.HideTransitionDuration = 0;
        });

        JSInterop.SetupVoid("mudElementRef.saveFocus", _ => true);
    }
}
