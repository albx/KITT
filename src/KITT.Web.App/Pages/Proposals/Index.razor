@page "/proposals"

@inject IStringLocalizer<Resources.Pages.Proposals.Index> Localizer
@inject IStringLocalizer<UI.Resources.Common> CommonLocalizer

@attribute [Authorize]

<SectionContent SectionName="@SectionNames.PageTitleSectionName">
    @Localizer[nameof(Resources.Pages.Proposals.Index.PageTitle)]
</SectionContent>

<FluentStack Class="mb-3">
    <EditForm Model="query" OnValidSubmit="SearchAsync" style="width:100%;">
        <DataAnnotationsValidator />

        <FluentGrid>
            <FluentGridItem xs="12" md="4">
                <FluentSelect TOption="Option<ProposalsQueryModel.SortDirection>"
                              Items="directions"
                              OptionValue="@(s => s.Value.ToString())"
                              OptionText="@(s => s.Text)"
                              Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalsQueryOrderLabel)]"
                              Value="@query.ScheduleSort.ToString()"
                              ValueChanged="@(value => query.ScheduleSort = Enum.Parse<ProposalsQueryModel.SortDirection>(value))"
                              Appearance="Appearance.Filled"
                              Style="width:100%; min-width:auto;" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="4">
                <FluentSelect TOption="Option<ProposalStatus?>"
                              Items="statuses"
                              OptionValue="@(s => s.Value?.ToString())"
                              OptionText="@(s => s.Text)"
                              Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalStatusLabel)]"
                              Value="@query.Status?.ToString()"
                              ValueChanged="@(value => query.Status = string.IsNullOrEmpty(value) ? null : Enum.Parse<ProposalStatus>(value))"
                              Appearance="Appearance.Filled"
                              Style="width:100%; min-width:auto;" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="4">
                <FluentSelect TOption="Option<int>"
                              Items="sizes"
                              OptionValue="@(s => s.Value.ToString())"
                              OptionText="@(s => s.Text)"
                              Value="@query.Size.ToString()"
                              ValueChanged="@(value => query.Size = int.Parse(value))"
                              Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalsQuerySizeLabel)]"
                              Appearance="Appearance.Filled"
                              Style="width:100%;min-width:auto;" />
            </FluentGridItem>

            <FluentGridItem xs="12" md="10">
                <FluentTextField Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalsQuerySearchLabel)]"
                                 @bind-Value="query.Query"
                                 Appearance="FluentInputAppearance.Filled"
                                 Style="width:100%;" />
            </FluentGridItem>
            <FluentGridItem xs="12" md="2">
                <FluentStack Orientation="Orientation.Horizontal"
                             HorizontalAlignment="HorizontalAlignment.End"
                             VerticalAlignment="VerticalAlignment.Bottom"
                             Style="height:100%;">
                    <FluentButton Type="ButtonType.Submit"
                                  Appearance="Appearance.Accent"
                                  IconStart="@(new Icons.Regular.Size20.Search())">
                        @Localizer[nameof(Resources.Pages.Proposals.Index.ProposalSearchLabel)]
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Outline"
                                  OnClick="ClearSearchAsync">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())" Color="Color.Accent" />
                    </FluentButton>
                </FluentStack>
            </FluentGridItem>
        </FluentGrid>
    </EditForm>
</FluentStack>
<FluentDivider />

<FluentDataGrid Items="proposals" 
                Loading="loading">
    <EmptyContent>
        <FluentLabel>@Localizer[nameof(Resources.Pages.Proposals.Index.NoProposalsMessage)]</FluentLabel>
    </EmptyContent>
    <ChildContent>
        <PropertyColumn Property="@(p => p.Title)" Title="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalTitleLabel)]" />
        <PropertyColumn Property="@(p => p.Description)" Title="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalDescriptionLabel)]" />
        <TemplateColumn Context="proposal" Title="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalDateLabel)]">
            @proposal.SubmittedAt.ToShortDateString()
        </TemplateColumn>
        <PropertyColumn Property="@(p => p.AuthorNickname)" Title="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalAuthorLabel)]" />
        <TemplateColumn Context="proposal" Title="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalStatusLabel)]">
            @Localizer[proposal.Status.ToString()]
        </TemplateColumn>
        <TemplateColumn Context="proposal">
            <FluentStack Orientation="Orientation.Horizontal"
                         VerticalAlignment="VerticalAlignment.Center"
                         HorizontalAlignment="HorizontalAlignment.End">
                @if (proposal.Status == ProposalStatus.Moderating)
                {
                    <FluentButton Appearance="Appearance.Accent"
                                  OnClick="@(() => AcceptProposalAsync(proposal))">
                        @Localizer[nameof(Resources.Pages.Proposals.Index.ProposalAcceptLabel)]
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Outline"
                                  OnClick="@(() => RefuseProposalAsync(proposal))">
                        @Localizer[nameof(Resources.Pages.Proposals.Index.ProposalRefuseLabel)]
                    </FluentButton>
                }
                else if (proposal.Status == ProposalStatus.WaitingForApproval)
                {
                    <FluentButton Appearance="Appearance.Accent"
                                  OnClick="@(() => ScheduleProposal(proposal))">
                        @Localizer[nameof(Resources.Pages.Proposals.Index.ProposalScheduleLabel)]
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Outline"
                                  OnClick="@(() => RejectProposalAsync(proposal))">
                        @Localizer[nameof(Resources.Pages.Proposals.Index.ProposalRejectLabel)]
                    </FluentButton>
                }
            </FluentStack>
        </TemplateColumn>
    </ChildContent>
</FluentDataGrid>

@*<PageLayout PageTitle="@Localizer[nameof(Resources.Pages.Proposals.Index.PageTitle)]">
        <PageContent>
            <MudPaper Class="mb-3 px-2">
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudSelect T="ProposalsQueryModel.SortDirection"
                                   Variant="Variant.Outlined"
                                   Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalsQueryOrderLabel)]"
                                   @bind-Value="query.ScheduleSort"
                                   Strict="true"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Dense="true"
                                   Margin="Margin.Dense">
                            @foreach (var sort in Enum.GetValues<ProposalsQueryModel.SortDirection>())
                            {
                                <MudSelectItem T="ProposalsQueryModel.SortDirection" Value="sort">@Localizer[sort.ToString()]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect T="ProposalStatus?"
                                   Variant="Variant.Outlined"
                                   Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalStatusLabel)]"
                                   @bind-Value="query.Status"
                                   Strict="true"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Dense="true"
                                   Margin="Margin.Dense">
                            <MudSelectItem T="ProposalStatus?" Value="null"></MudSelectItem>
                            @foreach (var status in Enum.GetValues<ProposalStatus>())
                            {
                                <MudSelectItem T="ProposalStatus?" Value="status">@Localizer[status.ToString()]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect Variant="Variant.Outlined"
                                   Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalsQuerySizeLabel)]"
                                   @bind-Value="query.Size"
                                   Strict="true"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Dense="true"
                                   Margin="Margin.Dense">
                            @foreach (var size in sizes)
                            {
                                <MudSelectItem Value="size">@size</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="10">
                        <MudTextField Margin="Margin.Dense"
                                      Label="@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalsQuerySearchLabel)]"
                                      @bind-Value="query.Query"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="2">
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                            <MudIconButton OnClick="Search" Icon="@Icons.Material.Filled.Search" />
                            <MudIconButton OnClick="ClearSearch" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" />
                        </MudButtonGroup>
                    </MudItem>
                </MudGrid>
            </MudPaper>
            <MudDivider />
            <MudPaper>
                <MudTable Items="model.Items" Loading="isLoading" LoadingProgressColor="Color.Primary">
                    <HeaderContent>
                        <MudTh>@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalTitleLabel)]</MudTh>
                        <MudTh>@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalDescriptionLabel)]</MudTh>
                        <MudTh>@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalDateLabel)]</MudTh>
                        <MudTh>@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalAuthorLabel)]</MudTh>
                        <MudTh>@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalStatusLabel)]</MudTh>
                        <MudTh>&nbsp;</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Title</MudTd>
                        <MudTd>@context.Description</MudTd>
                        <MudTd>@context.SubmittedAt.ToShortDateString()</MudTd>
                        <MudTd>@context.AuthorNickname</MudTd>
                        <MudTd>@Localizer[context.Status.ToString()]</MudTd>
                        <MudTd>
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                                @if (context.Status == ProposalStatus.Moderating)
                                {
                                    <MudButton OnClick="@(() => AcceptProposalAsync(context))">@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalAcceptLabel)]</MudButton>
                                    <MudButton OnClick="@(() => RefuseProposalAsync(context))">@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalRefuseLabel)]</MudButton>
                                }
                                else if (context.Status == ProposalStatus.WaitingForApproval)
                                {
                                    <MudButton OnClick="@(() => ScheduleProposal(context))">@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalScheduleLabel)]</MudButton>
                                    <MudButton OnClick="@(() => RejectProposalAsync(context))">@Localizer[nameof(Resources.Pages.Proposals.Index.ProposalRejectLabel)]</MudButton>
                                }
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>@Localizer[nameof(Resources.Pages.Proposals.Index.NoProposalsMessage)]</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudProgressCircular Color="Color.Primary"
                                             Indeterminate="true"
                                             Size="Size.Large" />
                    </LoadingContent>
                </MudTable>
            </MudPaper>
        </PageContent>
    </PageLayout>*@
