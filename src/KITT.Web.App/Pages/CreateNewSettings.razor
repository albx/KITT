@page "/settings/new"

@inject ISettingsClient Client
@inject NavigationManager Navigation

@inject IStringLocalizer<UI.Resources.Common> CommonLocalizer
@inject IStringLocalizer<Resources.Pages.CreateNewSettings> Localizer

@attribute [Authorize]

<PageLayout PageTitle="@Localizer[nameof(Resources.Pages.CreateNewSettings.PageTitle)]">
	<Toolbar>
        @*<NavButton Label="@CommonLocalizer[nameof(UI.Resources.Common.Back)]"
                   Page="settings"/>*@
	</Toolbar>
	<PageContent>
		<EditForm Model="model" OnValidSubmit="CreateNewSettingsAsync" id="newSettingsForm" class="col-md-12 mt-3">
			<DataAnnotationsValidator />

            @*@if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <MudPaper>
                    <MudText id="errorMessageContainer" Color="Color.Error">@errorMessage</MudText>
                </MudPaper>
                <MudDivider />
            }

            <MudCard>
                <MudCardContent>
                    <MudTextField Label="@Localizer[nameof(Resources.Pages.CreateNewSettings.TwitchChannelLabel)]"
                              @bind-Value="model.TwitchChannel"
                              Adornment="Adornment.Start"
                              AdornmentText="https://www.twitch.tv/"
                              Variant="Variant.Outlined"
                              For="@(() => model.TwitchChannel)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Reset" Color="Color.Primary" Variant="Variant.Outlined" Class="mr-4">@CommonLocalizer[nameof(UI.Resources.Common.Cancel)]</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">@CommonLocalizer[nameof(UI.Resources.Common.Save)]</MudButton>
                </MudCardActions>
            </MudCard>*@
		</EditForm>
	</PageContent>
</PageLayout>

@code {
    private CreateNewSettingsModel model = new();

    private string? errorMessage;

    async Task CreateNewSettingsAsync()
    {
        try
        {
            await Client.CreateNewSettingsAsync(model);
            model = new();

            Navigation.NavigateTo("settings");
        }
        catch (ApplicationException ex)
        {
            errorMessage = ex.Message;
        }
    }
}
